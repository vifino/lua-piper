describe("streams", function()
	local streams = require("streams")
	it("can send into a stream", function()
		local stream = streams.new()
		stream:send("Test!")
	end)
	it("can send and receive from stream", function()
		local stream = streams.new()
		stream:send("Test!")
		assert.are_equals(stream:recv(), "Test!")
	end)
	it("can send and receive from stream multiple times", function()
		local stream = streams.new()
		stream:send("Test one!")
		stream:send("Test two!")
		assert.are_equals(stream:recv(), "Test one!")
		assert.are_equals(stream:recv(), "Test two!")
	end)
	it("can send and receive from stream, returning nil when the buffer is empty", function()
		local stream = streams.new()
		stream:send("Test!")
		assert.are_equals(stream:recv(), "Test!")
		assert.are_equals(stream:recv(), nil)
	end)
	it("can send and receive from stream, running a basic filler function when empty", function()
		local filler = function()
			return "Filler!"
		end
		local stream = streams.new(filler)
		stream:send("Test!")
		assert.are_equals(stream:recv(), "Test!")
		assert.are_equals(stream:recv(), "Filler!")
	end)
	it("can send and receive from stream, running a complex filler function when empty", function()
		local filler = function(stream)
			stream:send("Filler one!")
			stream:send("Filler two!")
		end
		local stream = streams.new(filler)
		stream:send("Test!")
		assert.are_equals(stream:recv(), "Test!")
		assert.are_equals(stream:recv(), "Filler one!")
		assert.are_equals(stream:recv(), "Filler two!")
	end)
	it("can receive using an iterator", function()
		local stream = streams.new()
		local testvals = {"Test one!", "Test two!", "Test three!", "Test four!", "Test five!"}
		for _, val in pairs(testvals) do stream:send(val) end
		local i = 0
		for val in stream:iter() do
			i = i + 1
			assert.are_equals(testvals[i], val)
		end
	end)
end)
